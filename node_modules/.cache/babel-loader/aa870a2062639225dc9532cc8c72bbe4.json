{"ast":null,"code":"var fs = require('graceful-fs');\n\nvar path = require('path');\n\nvar writers = {}; // Returns a temporary file\n// Example: for /some/file will return /some/.~file\n\nfunction getTempFile(file) {\n  return path.join(path.dirname(file), '.~' + path.basename(file));\n}\n\nfunction Writer(file) {\n  this.file = file;\n  this.callbacks = [];\n  this.nextData = null;\n  this.nextCallbacks = [];\n}\n\nWriter.prototype.write = function (data, cb) {\n  if (this.lock) {\n    // File is locked\n    // Save callback for later\n    this.nextCallbacks.push(cb); // Set next data to be written\n\n    this.nextData = data;\n  } else {\n    // File is not locked\n    // Lock it\n    this.lock = true; // Write data to a temporary file\n\n    var tmpFile = getTempFile(this.file);\n    fs.writeFile(tmpFile, data, function (err) {\n      if (err) {\n        // On error, call all the stored callbacks and the current one\n        // Then return\n        while (this.callbacks.length) this.callbacks.shift()(err);\n\n        cb(err);\n        return;\n      } // On success rename the temporary file to the real file\n\n\n      fs.rename(tmpFile, this.file, function (err) {\n        // call all the stored callbacks and the current one\n        while (this.callbacks.length) this.callbacks.shift()(err);\n\n        cb(); // Unlock file\n\n        this.lock = false; // Write next data if any\n\n        if (this.nextData) {\n          var data = this.nextData;\n          this.callbacks = this.nextCallbacks;\n          this.nextData = null;\n          this.nextCallbacks = [];\n          this.write(data, this.callbacks.pop());\n        }\n      }.bind(this));\n    }.bind(this));\n  }\n};\n\nmodule.exports.writeFile = function (file, data, cb) {\n  // Convert to absolute path\n  file = path.resolve(file); // Create or get writer\n\n  writers[file] = writers[file] || new Writer(file); // Write\n\n  writers[file].write(data, cb);\n};\n\nmodule.exports.writeFileSync = function (file, data) {\n  fs.writeFileSync(getTempFile(file), data);\n  fs.renameSync(getTempFile(file), file);\n};","map":{"version":3,"sources":["D:/CodingProjects/nodejstest1/new-current-mini-app/node_modules/lowdb/node_modules/steno/index.js"],"names":["fs","require","path","writers","getTempFile","file","join","dirname","basename","Writer","callbacks","nextData","nextCallbacks","prototype","write","data","cb","lock","push","tmpFile","writeFile","err","length","shift","rename","pop","bind","module","exports","resolve","writeFileSync","renameSync"],"mappings":"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","sourcesContent":["var fs = require('graceful-fs')\nvar path = require('path')\n\nvar writers = {}\n\n// Returns a temporary file\n// Example: for /some/file will return /some/.~file\nfunction getTempFile (file) {\n  return path.join(path.dirname(file), '.~' + path.basename(file))\n}\n\nfunction Writer (file) {\n  this.file = file\n  this.callbacks = []\n  this.nextData = null\n  this.nextCallbacks = []\n}\n\nWriter.prototype.write = function (data, cb) {\n  if (this.lock) {\n    // File is locked\n    // Save callback for later\n    this.nextCallbacks.push(cb)\n    // Set next data to be written\n    this.nextData = data\n  } else {\n    // File is not locked\n    // Lock it\n    this.lock = true\n\n    // Write data to a temporary file\n    var tmpFile = getTempFile(this.file)\n    fs.writeFile(tmpFile, data, function (err) {\n      if (err) {\n        // On error, call all the stored callbacks and the current one\n        // Then return\n        while (this.callbacks.length) this.callbacks.shift()(err)\n        cb(err)\n        return\n      }\n\n      // On success rename the temporary file to the real file\n      fs.rename(tmpFile, this.file, function (err) {\n        // call all the stored callbacks and the current one\n        while (this.callbacks.length) this.callbacks.shift()(err)\n        cb()\n\n        // Unlock file\n        this.lock = false\n\n        // Write next data if any\n        if (this.nextData) {\n          var data = this.nextData\n          this.callbacks = this.nextCallbacks\n\n          this.nextData = null\n          this.nextCallbacks = []\n\n          this.write(data, this.callbacks.pop())\n        }\n      }.bind(this))\n    }.bind(this))\n  }\n}\n\nmodule.exports.writeFile = function (file, data, cb) {\n  // Convert to absolute path\n  file = path.resolve(file)\n\n  // Create or get writer\n  writers[file] = writers[file] || new Writer(file)\n\n  // Write\n  writers[file].write(data, cb)\n}\n\nmodule.exports.writeFileSync = function (file, data) {\n  fs.writeFileSync(getTempFile(file), data)\n  fs.renameSync(getTempFile(file), file)\n}\n"]},"metadata":{},"sourceType":"script"}